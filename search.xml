<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[阿里云服务器搭建SVN版本控制工具]]></title>
    <url>%2F2017%2F12%2F23%2F%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BASVN%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[阿里云服务器搭建SVN版本控制工具记录在终端下采用ssh root@47.92.3.188连接我的服务器进入远程主机操作修改阿里云主机名称命令：hostnamectl set-hostname 新主机名 SVN部署操作检查是否安装地板本SVN：rpm -qa subversion卸载旧版本svn:yum remove subversion安装svn服务器端：yum install subversion执行以下命令：cd /usr/local 进入目录mkdir svnRepo 创建SVN目录chmod -R 777 svnRepo 修改权限777svnadmin create /usr/local/svnRepo/test_server 创建一个svn版本仓库test_server(test_server可以随便取名字） cd svnRepo/test_server/conf 1）修改该目录下三个配置文件vi svnserve.conf把 anon-access = readauth-access = writepassword-db= passwdrealm = test_server前#号和空格去掉，变成anon-access = none //修改成noneauth-access = writepassword-db= passwdrealm = test_server //改成自己的版本库保存退出2）vi authz //文件，创建svn组和组用户的权限test_server //创建test_server组，并制定三个用户whl，wxr，ryg[/] //制定根目录下的权限[test_server:/]//制定版本分支目录下的权限@test_server = rw // test_server组用户权限为读写× = r //其他用户只有读权限保存退出3）修改或创建用户密码vi passwd[users]whl = Jitu2017wxr = Jitu2017ryg = Jitu2017保存退出 设置自启动vi /etc/rc.local //打开自启动文件 文件内容如下 #!/bin/bash THIS FILE IS ADDED FOR COMPATIBILITY PURPOSES# It is highly advisable to create own systemd services or udev rulesto run scripts during boot instead of using this file.# In contrast to previous versions due to parallel execution during bootthis script will NOT be run after all other services.# Please note that you must run ‘chmod +x /etc/rc.d/rc.local’ to ensurethat this script will be executed during boot.touch /var/lock/subsys/local 添加下面一行svnserve -d -r /usr/local/svnRepo/avalon_server保存退出ps aux | grep ‘svn’ 查找所有svn启动的进程杀死，然后启动svn svnserve -d -r /usr/local/svnRepo/first 启动svn(可以把这个放到/etc/local/rc.local文件中，实现开机自启动)sudo netstat -anp | grep svnserve //验证是否开启成功 关闭svnservesudo pstree | grep svn #查看 sudo killall svnserve #关闭 SVN版本库起动方式: 1：单版本库起动 svnserve -d -r /usr/local/svnRepo/test_server2：多版本库起动 svnserve -d -r /usr/local/svnRepo区别在于起动svn时候的命令中的启动参数-r指定的目录。 连接 svn://47.92.3.188:3690命令行下采用svn checkout svn://47.92.3.188:3690 已经过iOS PHP等项目版本控制验证]]></content>
      <categories>
        <category>版本控制</category>
      </categories>
      <tags>
        <tag>版本控制</tag>
        <tag>SVN</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PVA Faster RCNN配置安装及使用]]></title>
    <url>%2F2017%2F12%2F22%2FPVA-Faster-RCNN%E9%85%8D%E7%BD%AE%E5%AE%89%E8%A3%85%E5%8F%8A%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[论文：PVANET: Deep but Lightweight Neural Networks for Real-time Object Detection简介PVANET是目前目标检测算法比较好的实现，也是Region Proposal系列方法的一个新实现，目前达到了real-time的单张图像40ms，且在VOC12上达到了精度83.8%，是region proposal目前精度最高的，也突破了region proposal系列方法RCNN、Fast RCNN、Faster RCNN的精度高不能实时的问题。目前回归类方法最新的SSD以及YOLO9000虽然速度很快，但是精度比其差了不少。所以PVANET还是值得实现的。论文地址：https://www.arxiv.org/pdf/1608.08021v3.pdfgithub项目:https://github.com/sanghoon/pva-faster-rcnn实现环境操作系统：Ubuntu 16.04LTS显卡：NVIDIA GTX 1080TICUDA8.0Cudnn V5.1其它配置忽略（不重要） Caffe General Dependencies安装 sudo apt-get update sudo apt-get upgrade sudo apt-get install -y build-essential cmake git pkg-config sudo apt-get install -y libprotobuf-dev libleveldb-dev libsnappy-dev libhdf5-serial-dev protobuf-compiler sudo apt-get install -y libatlas-base-dev sudo apt-get install -y --no-install-recommends libboost-all-dev sudo apt-get install -y libgflags-dev libgoogle-glog-dev liblmdb-dev (Python general) sudo apt-get install -y python-pip \#(Python 2.7 development files) sudo apt-get install -y python-dev sudo apt-get install -y python-numpy python-scipy OpenCV安装此处根据git master branch安装的3.2.0-dev版本 \#Build tools: sudo apt-get install build-essential sudo apt-get install cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev sudo apt-get install python-dev python-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libjasper-dev libdc1394-22-dev cd ~ git clone https://github.com/opencv/opencv.git cd opencv mkdir build cd build cmake -D CMAKE_BUILD_TYPE=RELEASE \ -D CMAKE_INSTALL_PREFIX=/usr/local \ -D WITH_CUDA=ON \ -D WITH_CUBLAS=1 \ -D INSTALL_PYTHON_EXAMPLES=ON \ -D BUILD_EXAMPLES=ON .. make all -j16（此处根据你自己的计算机性能进行安装） sudo make -j16 install sudo ldconfig 检查安装 $ python \>>>import cv2 \>>>cv2.__version__ 输出：'3.2.0-dev' 有关CUDA 8.0+Cudnn5.1的安装请自行百度 pva-faster-rcnn的搭建 1.获取项目 git clone --recursive https://github.com/sanghoon/pva-faster-rcnn.git 2.编译建立Cython模块 安装python依赖 sudo pip install Cython sudo pip install easydict cd pva-faster-rcnn/lib 此处需要修改lib下的setup.py第135行 GPU 计算能力查看地址'nvcc': ['-arch=sm_35', https://developer.nvidia.com/cuda-gpus ![](http://upload-images.jianshu.io/upload_images/3478042-7250cd061ba5e39a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240) 比如我的是1080TI，计算能力为6.1，则修改为 'nvcc': ['-arch=sm_61', 执行 make all -j16 进行编译 3.编译建立Caffe和pycaffe cd pva-faster-rcnn/caffe-fast-rcnn cp Makefile.config.example Makefile.config gedit Makefile.config 修改Makefile.config文件: 需要修改的行如下 USE_CUDNN := 1 OPENCV_VERSION := 3 #CUDA directory contains bin/ and lib/ directories that we need. CUDA_DIR := /usr/local/cuda CUDA_DIR := /usr/local/cuda-8.0 # Whatever else you find you need goes here. INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/ LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-Linux-gnu/hdf5/serial/ INCLUDE_DIRS := $(PYTHON_INCLUDE) /usr/local/include /usr/include/hdf5/serial/ LIBRARY_DIRS := $(PYTHON_LIB) /usr/local/lib /usr/lib /usr/lib/x86_64-Linux-gnu/hdf5/serial/ #Uncomment to support layers written in Python (will link against Python libs) WITH_PYTHON_LAYER := 1 #Uncomment to use `pkg-config` to specify OpenCV library paths. # (Usually not necessary -- OpenCV libraries are normally installed in one of the above $LIBRARY_DIRS.) USE_PKG_CONFIG := 1 Makefile修改 cd ~/pva-faster-rcnn/caffe-faster-rcnn gedit Makefile 需要注意的是暂时不要采用最新的cudnn v6版本，我使用的时候发觉会出错，v5.1版本修改此配置。 原有 NVCCFLAGS += -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS) 修改为 NVCCFLAGS += -D_FORCE_INLINES -ccbin=$(CXX) -Xcompiler -fPIC $(COMMON_FLAGS) 更新caffe-fast-rcnn的caffe部分，因为此项目caffe不是最新涉及到cudnn的计算会报错。 # Make sure to clone with --recursive cd ~/pva-faster-rcnn/caffe-fast-rcnn git remote add -f caffe https://github.com/BVLC/caffe.git git merge -X theirs caffe/master gedit include/caffe/layers/python_layer.hpp \# Remove self_.attr("phase") = static_cast(this->phase_); cd ~/pva-faster-rcnn/caffe-faster-rcnn/python for req in $(cat requirements.txt); do sudo -H pip install $req --upgrade; done 编译安装 mkdir build cd build cmake .. make -j16 all make -j16 pycaffe make -j16 install Caffe路径设置 gedit ~/.bashrc export CAFFE_ROOT=~/py-faster-rcnn/caffe-fast-rcnn export PYTHONPATH=~/py-faster-rcnn/caffe-fast-rcnn/python:$PYTHONPATH source ~/.bashrc 检查安装 $ python >>> import caffe >>> caffe.__version__ sudo -H pip install easydict sudo apt-get install python-gi-cairo python-tk 4.下载预训练模型如果有VPN网速好的话直接采用pva-faster-rcnn/models下的的shell脚本进行下载此处采用百度网盘下载链接：http://pan.baidu.com/s/1kVRRPDd 密码：1cdt1、打开文件将test.model放入$pva-faster-rcnn/models/pvanet/full/这个目录下2、将test(1).model重命名为test.model放入$pva-faster-rcnn/models/pvanet/comp/目录下5.voc2007数据集下载打开终端（任何目录）输入： wget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtrainval_06-Nov-2007.tarwget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCtest_06-Nov-2007.tarwget http://host.robots.ox.ac.uk/pascal/VOC/voc2007/VOCdevkit_08-Jun-2007.tar解压（严格按照此顺序）： tar xvf VOCtrainval_06-Nov-2007.tartar xvf VOCtest_06-Nov-2007.tartar xvf VOCdevkit_08-Jun-2007.tar将生成的VOCdevkit文件夹更名为VOCdevkit2007移动至$pva-faster-rcnn/data/目录下面6.测试需要注意的是缺少test.pt，请将pvanet_obsolete下的对应文件复制过来即可终端输入： cd $pva-faster-rcnn1、full/test.model测试： ./tools/test_net.py –gpu 0 –def models/pvanet/full/test.pt –net models/pvanet/full/test.model –cfg models/pvanet/cfgs/submit_0716.yml2、Comp/test.model测试： ./tools/test_net.py –gpu 0 –def models/pvanet/comp/test.pt –net models/pvanet/comp/test.model –cfg models/pvanet/cfgs/submit_0716.yml此测试会得到系列类别的AP值3.模型的可视化检测demo此处需要重新编写demo.py文件可在我github下fork的分支获取该文件demo.py文件https://github.com/YgRen/pva-faster-rcnn cd pva-faster-rcnn执行 ./tools/demo.py –gpu 0 –def models/pvanet/comp/test.pt –net models/pvanet/comp/test.model生成可视化结果 记录：关于自定义数据集的训练和调参后期会进行发布，关于VOC07和12数据集的训练，直接参照github项目地址操作即可，最近会更新论文精读。]]></content>
      <categories>
        <category>计算机视觉</category>
      </categories>
      <tags>
        <tag>计算机视觉</tag>
        <tag>目标检测</tag>
        <tag>深度学习</tag>
      </tags>
  </entry>
</search>
